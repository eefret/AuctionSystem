package com.kaissersoft.app.auctionsystem.greendao;

import java.util.List;
import com.kaissersoft.app.auctionsystem.greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table item.
 */
public class Item {

    private Long id;
    private Long owner;
    private String name;
    private Long winner;
    private String STATUS;
    private String imgPath;
    private Double initialPrice;
    private Double currentPrice;
    private java.util.Date auctionExpiration;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ItemDao myDao;

    private User user_ownerFK;
    private Long user_ownerFK__resolvedKey;

    private User user_winnerFK;
    private Long user_winnerFK__resolvedKey;

    private List<Bid> bidList;

    public Item() {
    }

    public Item(Long id) {
        this.id = id;
    }

    public Item(Long id, Long owner, String name, Long winner, String STATUS, String imgPath, Double initialPrice, Double currentPrice, java.util.Date auctionExpiration) {
        this.id = id;
        this.owner = owner;
        this.name = name;
        this.winner = winner;
        this.STATUS = STATUS;
        this.imgPath = imgPath;
        this.initialPrice = initialPrice;
        this.currentPrice = currentPrice;
        this.auctionExpiration = auctionExpiration;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getItemDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getOwner() {
        return owner;
    }

    public void setOwner(Long owner) {
        this.owner = owner;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Long getWinner() {
        return winner;
    }

    public void setWinner(Long winner) {
        this.winner = winner;
    }

    public String getSTATUS() {
        return STATUS;
    }

    public void setSTATUS(String STATUS) {
        this.STATUS = STATUS;
    }

    public String getImgPath() {
        return imgPath;
    }

    public void setImgPath(String imgPath) {
        this.imgPath = imgPath;
    }

    public Double getInitialPrice() {
        return initialPrice;
    }

    public void setInitialPrice(Double initialPrice) {
        this.initialPrice = initialPrice;
    }

    public Double getCurrentPrice() {
        return currentPrice;
    }

    public void setCurrentPrice(Double currentPrice) {
        this.currentPrice = currentPrice;
    }

    public java.util.Date getAuctionExpiration() {
        return auctionExpiration;
    }

    public void setAuctionExpiration(java.util.Date auctionExpiration) {
        this.auctionExpiration = auctionExpiration;
    }

    /** To-one relationship, resolved on first access. */
    public User getUser_ownerFK() {
        Long __key = this.owner;
        if (user_ownerFK__resolvedKey == null || !user_ownerFK__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User user_ownerFKNew = targetDao.load(__key);
            synchronized (this) {
                user_ownerFK = user_ownerFKNew;
            	user_ownerFK__resolvedKey = __key;
            }
        }
        return user_ownerFK;
    }

    public void setUser_ownerFK(User user_ownerFK) {
        synchronized (this) {
            this.user_ownerFK = user_ownerFK;
            owner = user_ownerFK == null ? null : user_ownerFK.getId();
            user_ownerFK__resolvedKey = owner;
        }
    }

    /** To-one relationship, resolved on first access. */
    public User getUser_winnerFK() {
        Long __key = this.winner;
        if (user_winnerFK__resolvedKey == null || !user_winnerFK__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User user_winnerFKNew = targetDao.load(__key);
            synchronized (this) {
                user_winnerFK = user_winnerFKNew;
            	user_winnerFK__resolvedKey = __key;
            }
        }
        return user_winnerFK;
    }

    public void setUser_winnerFK(User user_winnerFK) {
        synchronized (this) {
            this.user_winnerFK = user_winnerFK;
            winner = user_winnerFK == null ? null : user_winnerFK.getId();
            user_winnerFK__resolvedKey = winner;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Bid> getBidList() {
        if (bidList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BidDao targetDao = daoSession.getBidDao();
            List<Bid> bidListNew = targetDao._queryItem_BidList(id);
            synchronized (this) {
                if(bidList == null) {
                    bidList = bidListNew;
                }
            }
        }
        return bidList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetBidList() {
        bidList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
